<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="de.marw.cmake" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="de.marw.cmake" id="lspDetectionParticipant" name="Tool Detection Participants"/>
      </appinfo>
      <documentation>
         Allows plug-ins to contribute to detection of compiler include paths, preprocessor defines and preprocessor un-defines from a command-line text.
&lt;p&gt;This extension point teaches the &lt;i&gt;CMAKE_EXPORT_COMPILE_COMMANDS Parser&lt;/i&gt; and the &lt;i&gt;CMAKE_EXPORT_COMPILE_COMMANDS Compiler Built-ins&lt;/i&gt; language settings providers to analyze compiler-specific command-lines incl. options for a specific compiler. The detected include paths, preprocessor defines and preprocessor un-defines from the compiler command-line get passed to the CDT indexer.&lt;/p&gt;
&lt;p&gt;Third party compiler vendors may use this extension point to add their compiler (or other tool) for improved syntax highlighting in the CDT&apos;s C/C++ editors.
&lt;/p&gt;
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="tool"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  a fully qualified identifier of the target extension point
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  ID of the extension point, not used
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  Name of the extension point, not used
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="tool">
      <annotation>
         <documentation>
            Specifies the details for detectiion of a specific compiler by its executable name and how the include paths, preprocessor defines and preprocessor un-defines are processed.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The fully qualified name of a class that implements &lt;code&gt;de.marw.cmake.cdt.language.settings.providers.IToolDetectionParticiant&lt;/code&gt;, The implementation must provide a public no-argument constructor.&lt;br/&gt;
You may want to consider sub-classing &lt;code&gt;de.marw.cmake.cdt.language.settings.providers.DefaultToolDetectionParticiant&lt;/code&gt; for convenience instead of directly implementing the interface.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.marw.cmake.cdt.language.settings.providers.IToolCommandlineParser"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="displayName" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the compiler for display in the UI.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         2.0.0
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         Following is an example of a tool detection participant: 
&lt;p&gt;
&lt;pre&gt;
 &lt;extension point=&quot;de.marw.cmake.cdt.lsp.DetectionParticipant&quot;&gt;
    &lt;tool class=&quot;com.foobar.ToolCommandlineParser&quot; displayName=&quot;Foobar C&quot;&gt;
    &lt;/tool&gt;
 &lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
The easiest way to implement a tool detection participant would be to sub-class &lt;code&gt;de.marw.cmake.cdt.language.settings.providers.DefaultToolDetectionParticiant&lt;/code&gt;. 
To configure your class, pass an instance of &lt;code&gt;de.marw.cmake.cdt.language.settings.providers.DefaultToolCommandlineParser&lt;/code&gt; in its super-constructor.&lt;br/&gt;
Some predifined parsers for tool arguments can be found in the classes &lt;code&gt;Arglets&lt;/code&gt; and &lt;code&gt;ResponseFileArglets&lt;/code&gt;.
&lt;/p&gt;
      </documentation>
   </annotation>


   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright (c) 2019 Martin Weber&lt;br&gt;
All rights reserved. This program and the accompanying materials are made 
available under the terms of the Eclipse Public License v1.0.
      </documentation>
   </annotation>

</schema>
